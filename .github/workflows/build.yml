name: Build, Test and Publish

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Job to prepare common metadata for all builds
  prepare:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      # Extract metadata for Docker images
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/cloudnativepg-plv8
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=17,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
            type=raw,value=latest-17,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}

  # Build for amd64 architecture
  build-amd64:
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Build and push for amd64
      - name: Build and push amd64
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          build-args: |
            PG_CONTAINER_VERSION=17
          push: ${{ github.event_name != 'pull_request' }}
          tags: ghcr.io/${{ github.repository_owner }}/cloudnativepg-plv8:17-amd64
          labels: ${{ needs.prepare.outputs.labels }}
          cache-from: type=gha,scope=amd64
          cache-to: type=gha,scope=amd64,mode=max

      # Test amd64 image for PR builds
      - name: Test amd64 image locally (PR only)
        if: github.event_name == 'pull_request'
        run: |
          docker buildx build --load --build-arg PG_CONTAINER_VERSION=17 -t test-pg-plv8:17-amd64 .
          docker run --rm test-pg-plv8:17-amd64 postgres --version

  # Build for arm64 architecture on a native arm64 runner
  build-arm64:
    needs: prepare
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Build and push for arm64 (no QEMU needed since we're on native arm64)
      - name: Build and push arm64
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          build-args: |
            PG_CONTAINER_VERSION=17
          push: ${{ github.event_name != 'pull_request' }}
          tags: ghcr.io/${{ github.repository_owner }}/cloudnativepg-plv8:17-arm64
          labels: ${{ needs.prepare.outputs.labels }}
          cache-from: type=gha,scope=arm64
          cache-to: type=gha,scope=arm64,mode=max

      # Test arm64 image for PR builds
      - name: Test arm64 image locally (PR only)
        if: github.event_name == 'pull_request'
        run: |
          docker buildx build --load --build-arg PG_CONTAINER_VERSION=17 -t test-pg-plv8:17-arm64 .
          docker run --rm test-pg-plv8:17-arm64 postgres --version

  # Merge manifests if both builds succeed
  merge-manifests:
    needs: [prepare, build-amd64, build-arm64]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Enable Docker experimental features for manifest support
      - name: Enable Docker experimental features
        run: |
          mkdir -p ~/.docker
          echo '{"experimental": "enabled"}' > ~/.docker/config.json
          # Also enable experimental CLI features
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker
          docker version
      
      # Create and push multi-arch manifest using Docker CLI directly
      - name: Create and push multi-arch manifests
        run: |
          # Process each tag from the prepare job
          echo "${{ needs.prepare.outputs.tags }}" | while read -r tag; do
            if [ -n "$tag" ]; then
              echo "Creating manifest for $tag"
              
              # Create the manifest
              docker manifest create "$tag" \
                --amend "ghcr.io/${{ github.repository_owner }}/cloudnativepg-plv8:17-amd64" \
                --amend "ghcr.io/${{ github.repository_owner }}/cloudnativepg-plv8:17-arm64"
              
              # Add architecture-specific annotations
              docker manifest annotate "$tag" \
                "ghcr.io/${{ github.repository_owner }}/cloudnativepg-plv8:17-amd64" \
                --os linux --arch amd64
              
              docker manifest annotate "$tag" \
                "ghcr.io/${{ github.repository_owner }}/cloudnativepg-plv8:17-arm64" \
                --os linux --arch arm64 --variant v8
              
              # Push the manifest
              docker manifest push --purge "$tag"
              echo "Successfully pushed manifest for $tag"
            fi
          done
